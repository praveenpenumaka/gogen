package controllers

import (
	"errors"
	"github.com/dgrijalva/jwt-go"
	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
	"net/http"
	"{{ Basepath "" }}/models"
	"strings"
	"time"
)

type AuthController struct {
	DB        *gorm.DB
	Duration  int64 // In hours
	SecretKey []byte
}

type LoginRequest struct {
	Team     string `json:"team" binding:"required"`
	Username string `json:"username" binding:"required"`
	Password string `json:"password" binding:"required"`
}

type SessionToken struct {
	jwt.StandardClaims
	Username string    `json:"username"`
	Team     string    `json:"team"`
	Expiry   time.Time `json:"expiry"`
	Roles    []string  `json:"roles"`
}

func (base *AuthController) ValidateLoginRequest(req *LoginRequest) error {
	if req == nil {
		return errors.New("invalid login request")
	}
	if req.Username == "" || req.Password == "" || req.Team == "" {
		return errors.New("username/password/team cannot be empty")
	}
	specialString := " !#$%^&*()[]{};:'<>,/|~"
	if strings.ContainsAny(req.Username, specialString) || strings.ContainsAny(req.Username, specialString) {
		return errors.New("username or team has special characters in them, please verify")
	}
	return nil
}

func (base *AuthController) Login(c *gin.Context) {
	req := new(LoginRequest)
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusOK, gin.H{"error": "Invalid login request"})
		return
	}
	// Validate request
	if err := base.ValidateLoginRequest(req); err != nil {
		c.JSON(http.StatusOK, gin.H{"error": err.Error()})
		return
	}

	user := new(models.User)
	// Get user details and role and corresponding permissions
	tx := base.DB.Model(&models.User{}).Where("email = ? AND team = ?", req.Username, req.Team).Find(&user)
	if tx.Error != nil {
		c.JSON(http.StatusOK, gin.H{"error": tx.Error.Error()})
		return
	}
	if tx.RowsAffected == 0 {
		c.JSON(http.StatusOK, gin.H{"error": "no user with that username found"})
		return
	}
	if user.Password != req.Password {
		c.JSON(http.StatusOK, gin.H{"error": "invalid credentials"})
		return
	}

	// Generate Token and return it
	expiry := time.Now().Add(time.Duration(base.Duration) * time.Hour)
	tokenClaims := &SessionToken{
		Username: req.Username,
		Team:     req.Team,
		Expiry:   expiry,
		Roles:    strings.Split(user.Role, ","),
		StandardClaims: jwt.StandardClaims{
			ExpiresAt: expiry.Unix(),
			Issuer:    "auth-controller",
		},
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS512, tokenClaims)
	ss, _ := token.SignedString(base.SecretKey)
	c.JSON(http.StatusOK, gin.H{"token": ss})
}

// Auth middleware for requests
func (base *AuthController) Auth(c *gin.Context) {
	tokenString := c.GetHeader("Authorization")
	claims := new(SessionToken)
	token, err := jwt.ParseWithClaims(tokenString, claims, func(token *jwt.Token) (interface{}, error) {
		return []byte(base.SecretKey), nil
	})
	if err != nil {
		c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": err.Error()})
		return
	}
	claims, ok := token.Claims.(*SessionToken)
	if !ok || !token.Valid {
		c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "unable to parse token for claims"})
		return
	}
	if claims.Expiry.Before(time.Now()) {
		c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "token provided is already expired"})
		return
	}

	// Load user details from DB
	c.Set("claims", claims)
	c.Next()
}
